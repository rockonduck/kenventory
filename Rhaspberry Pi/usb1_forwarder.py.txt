import tkinter as tk
import time
import threading
import serial
import paho.mqtt.client as mqtt
import os

# --- CONFIG ---
MQTT_BROKER = "[broker link]"
MQTT_PORT = 8883
MQTT_USER = "[username]"
MQTT_PASSWORD = "[password]"
SERIAL_PORT = "/dev/ttyUSB0"
BAUD_RATE = 115200

# --- UI CONFIG ---
class KenventoryUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Kenventory USB1 Monitor")
        self.geometry("400x150")
        self.configure(bg="black")

        self.status_text = tk.StringVar(value="Disconnected")
        self.status_box = tk.Label(self, textvariable=self.status_text, font=("Arial", 16), width=30, bg="gray", fg="white")
        self.status_box.pack(pady=40)

    def update_status(self, label, color):
        self.status_text.set(label)
        self.status_box.config(bg=color)

# --- BACKGROUND SERIAL + MQTT ---
def monitor_serial(ui):
    while True:
        if not os.path.exists(SERIAL_PORT):
            ui.update_status("Disconnected", "gray")
            time.sleep(1)
            continue

        try:
            with serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1) as ser:
                # Set up MQTT client after serial connection
                client = mqtt.Client()
                client.username_pw_set(MQTT_USER, MQTT_PASSWORD)
                client.tls_set()
                try:
                    client.connect(MQTT_BROKER, MQTT_PORT)
                    client.loop_start()
                    print("[MQTT] Connected to broker.")
                except Exception as mqtt_error:
                    print(f"[MQTT] Connection error: {mqtt_error}")
                    continue

                ui.update_status("Waiting for MAC", "gray")
                buffer = ""
                while True:
                    if not os.path.exists(SERIAL_PORT):
                        raise serial.SerialException("Serial port removed")

                    char = ser.read(1).decode("utf-8", errors="ignore")
                    if not char:
                        continue
                    if char == "\n":
                        line = buffer.strip()
                        buffer = ""
                        print(f"[SERIAL RAW] {line}")
                        if " = " in line:
                            topic, value = line.split(" = ", 1)
                            if topic.startswith("kenventory/") and "/sensor/" in topic:
                                mac = topic.split("/")[1]
                                print(f"[PARSED] MAC={mac}  |  {topic} = {value}")
                                ui.update_status(mac, "green")

                                # ? MQTT PUBLISH
                                try:
                                    client.publish(topic, value)
                                    print(f"[MQTT] Published: {topic} = {value}")
                                except Exception as publish_error:
                                    print(f"[MQTT] Publish error: {publish_error}")
                    else:
                        buffer += char

        except Exception as e:
            print(f"[Serial Error] {e}")
            ui.update_status("Disconnected", "gray")
            time.sleep(2)


# --- MAIN ---
if __name__ == "__main__":
    app = KenventoryUI()
    threading.Thread(target=monitor_serial, args=(app,), daemon=True).start()
    app.mainloop()
